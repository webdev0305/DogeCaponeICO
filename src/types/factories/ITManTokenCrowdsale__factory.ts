/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ITManTokenCrowdsale,
  ITManTokenCrowdsaleInterface,
} from "../ITManTokenCrowdsale";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rate",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "_wallet",
        type: "address",
      },
      {
        internalType: "contract ERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenWallet",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_openingTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_closingTime",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "prevClosingTime",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newClosingTime",
        type: "uint256",
      },
    ],
    name: "TimedCrowdsaleExtended",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "purchaser",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensPurchased",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "buyTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "closingTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasClosed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "holderWeiRaised",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isOpen",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "openingTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "remainingTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenWallet",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wallet",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "weiRaised",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f0f38038062000f0f83398101604081905262000034916200030b565b600160005581818488888882620000925760405162461bcd60e51b815260206004820152601460248201527f43726f776473616c653a2072617465206973203000000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000f85760405162461bcd60e51b815260206004820152602560248201527f43726f776473616c653a2077616c6c657420697320746865207a65726f206164604482015264647265737360d81b606482015260840162000089565b6001600160a01b0381166200015c5760405162461bcd60e51b8152602060048201526024808201527f43726f776473616c653a20746f6b656e20697320746865207a65726f206164646044820152637265737360e01b606482015260840162000089565b600392909255600280546001600160a01b03199081166001600160a01b039384161790915560018054909116928216929092179091558116620002085760405162461bcd60e51b815260206004820152603460248201527f416c6c6f77616e636543726f776473616c653a20746f6b656e2077616c6c657460448201527f20697320746865207a65726f2061646472657373000000000000000000000000606482015260840162000089565b600680546001600160a01b0319166001600160a01b0392909216919091179055428210156200028f5760405162461bcd60e51b8152602060048201526033602482015260008051602062000eef83398151915260448201527f6265666f72652063757272656e742074696d6500000000000000000000000000606482015260840162000089565b818111620002f55760405162461bcd60e51b8152602060048201526037602482015260008051602062000eef83398151915260448201527f6e6f74206265666f726520636c6f73696e672074696d65000000000000000000606482015260840162000089565b6007919091556008555062000393945050505050565b60008060008060008060c0878903121562000324578182fd5b86519550602087015162000338816200037a565b60408801519095506200034b816200037a565b60608801519094506200035e816200037a565b809350506080870151915060a087015190509295509295509295565b6001600160a01b03811681146200039057600080fd5b50565b610b4c80620003a36000396000f3fe6080604052600436106100ab5760003560e01c80636cae5ef9116100645780636cae5ef91461017d578063b7a8807c146101b3578063bf583903146101c8578063bff99c6c146101dd578063ec8ac4d8146101fb578063fc0c546a1461020957600080fd5b80631515bc2b146100c55780632c4e722e146100ed5780634042b66f1461010c57806347535d7b146101215780634b6753bc14610136578063521eb2731461014b57600080fd5b366100c0576100be33610227565b610227565b005b600080fd5b3480156100d157600080fd5b5060085442115b60405190151581526020015b60405180910390f35b3480156100f957600080fd5b506003545b6040519081526020016100e4565b34801561011857600080fd5b506004546100fe565b34801561012d57600080fd5b506100d8610344565b34801561014257600080fd5b506008546100fe565b34801561015757600080fd5b506002546001600160a01b03165b6040516001600160a01b0390911681526020016100e4565b34801561018957600080fd5b506100fe6101983660046109ef565b6001600160a01b031660009081526005602052604090205490565b3480156101bf57600080fd5b506007546100fe565b3480156101d457600080fd5b506100fe61035f565b3480156101e957600080fd5b506006546001600160a01b0316610165565b6100be6100b93660046109ef565b34801561021557600080fd5b506001546001600160a01b0316610165565b6002600054141561027f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000553461028f8282610485565b600061029a826104e2565b9050816004546102aa9190610a9d565b600455336000908152600560205260409020546102c8908390610a9d565b336000908152600560205260409020556102e283826104f8565b60408051838152602081018390526001600160a01b0385169133917f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b910160405180910390a3610330610502565b61033a838361053e565b5050600160005550565b6000600754421015801561035a57506008544211155b905090565b600061035a6103766001546001600160a01b031690565b6006546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b1580156103ba57600080fd5b505afa1580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f29190610a36565b6001546001600160a01b0316600654604051636eb1769f60e11b81526001600160a01b03918216600482015230602482015291169063dd62ed3e9060440160206040518083038186803b15801561044857600080fd5b505afa15801561045c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104809190610a36565b6105bb565b61048d610344565b6104d45760405162461bcd60e51b81526020600482015260186024820152772a34b6b2b221b937bbb239b0b6329d103737ba1037b832b760411b6044820152606401610276565b6104de82826105d3565b5050565b6000600354826104f29190610ab5565b92915050565b6104de828261062c565b6002546040516001600160a01b03909116903480156108fc02916000818181858888f1935050505015801561053b573d6000803e3d6000fd5b50565b33600090815260056020526040902054671bc16d674ec8000010156104de5760405162461bcd60e51b815260206004820152602d60248201527f43726f776473616c653a20776569416d6f756e74206d757374206265206c657360448201526c73207468616e203220424e422160981b6064820152608401610276565b60008183106105ca57816105cc565b825b9392505050565b6105db610344565b6106225760405162461bcd60e51b81526020600482015260186024820152772a34b6b2b221b937bbb239b0b6329d103737ba1037b832b760411b6044820152606401610276565b6104de8282610636565b6104de828261070c565b6001600160a01b03821661069f5760405162461bcd60e51b815260206004820152602a60248201527f43726f776473616c653a2062656e656669636961727920697320746865207a65604482015269726f206164647265737360b01b6064820152608401610276565b67016345785d8a00008110156104de5760405162461bcd60e51b815260206004820152602c60248201527f43726f776473616c653a20776569416d6f756e74206d7573742062652062696760448201526b67657220302e3120424e422160a01b6064820152608401610276565b6006546104de906001600160a01b031683836107306001546001600160a01b031690565b604080516001600160a01b038681166024830152858116604483015260648083018690528351808403909101815260849092019092526020810180516001600160e01b03166323b872dd60e01b179052911693929190610791908590610797565b50505050565b60006107ec826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661086e9092919063ffffffff16565b805190915015610869578080602001905181019061080a9190610a16565b6108695760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610276565b505050565b606061087d8484600085610885565b949350505050565b6060824710156108e65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610276565b6001600160a01b0385163b61093d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610276565b600080866001600160a01b031685876040516109599190610a4e565b60006040518083038185875af1925050503d8060008114610996576040519150601f19603f3d011682016040523d82523d6000602084013e61099b565b606091505b50915091506109ab8282866109b6565b979650505050505050565b606083156109c55750816105cc565b8251156109d55782518084602001fd5b8160405162461bcd60e51b81526004016102769190610a6a565b600060208284031215610a00578081fd5b81356001600160a01b03811681146105cc578182fd5b600060208284031215610a27578081fd5b815180151581146105cc578182fd5b600060208284031215610a47578081fd5b5051919050565b60008251610a60818460208701610ad4565b9190910192915050565b6020815260008251806020840152610a89816040850160208701610ad4565b601f01601f19169190910160400192915050565b60008219821115610ab057610ab0610b00565b500190565b6000816000190483118215151615610acf57610acf610b00565b500290565b60005b83811015610aef578181015183820152602001610ad7565b838111156107915750506000910152565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220395b27720199a208a56c0704e66e9335b2430e2cbb026f4272bde0b0fee932b464736f6c6343000804003354696d656443726f776473616c653a206f70656e696e672074696d6520697320";

type ITManTokenCrowdsaleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ITManTokenCrowdsaleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ITManTokenCrowdsale__factory extends ContractFactory {
  constructor(...args: ITManTokenCrowdsaleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ITManTokenCrowdsale";
  }

  deploy(
    _rate: BigNumberish,
    _wallet: string,
    _token: string,
    _tokenWallet: string,
    _openingTime: BigNumberish,
    _closingTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ITManTokenCrowdsale> {
    return super.deploy(
      _rate,
      _wallet,
      _token,
      _tokenWallet,
      _openingTime,
      _closingTime,
      overrides || {}
    ) as Promise<ITManTokenCrowdsale>;
  }
  getDeployTransaction(
    _rate: BigNumberish,
    _wallet: string,
    _token: string,
    _tokenWallet: string,
    _openingTime: BigNumberish,
    _closingTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _rate,
      _wallet,
      _token,
      _tokenWallet,
      _openingTime,
      _closingTime,
      overrides || {}
    );
  }
  attach(address: string): ITManTokenCrowdsale {
    return super.attach(address) as ITManTokenCrowdsale;
  }
  connect(signer: Signer): ITManTokenCrowdsale__factory {
    return super.connect(signer) as ITManTokenCrowdsale__factory;
  }
  static readonly contractName: "ITManTokenCrowdsale";
  public readonly contractName: "ITManTokenCrowdsale";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ITManTokenCrowdsaleInterface {
    return new utils.Interface(_abi) as ITManTokenCrowdsaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITManTokenCrowdsale {
    return new Contract(address, _abi, signerOrProvider) as ITManTokenCrowdsale;
  }
}
